Description:  This template deploys a CVAT on AWS ECS Fargate.

Parameters:

  VpcCIDR:
    Description: Please enter the IP range (CIDR notation) for this VPC
    Type: String
    Default: 10.192.0.0/16

  PublicSubnet1CIDR:
    Description: Please enter the IP range (CIDR notation) for the public subnet in the first Availability Zone
    Type: String
    Default: 10.192.10.0/24

  PublicSubnet2CIDR:
    Description: Please enter the IP range (CIDR notation) for the public subnet in the second Availability Zone
    Type: String
    Default: 10.192.11.0/24

  PublicSubnet3CIDR:
    Description: Please enter the IP range (CIDR notation) for the public subnet in the second Availability Zone
    Type: String
    Default: 10.192.12.0/24

  PrivateSubnet1CIDR:
    Description: Please enter the IP range (CIDR notation) for the private subnet in the first Availability Zone
    Type: String
    Default: 10.192.20.0/24

  PrivateSubnet2CIDR:
    Description: Please enter the IP range (CIDR notation) for the private subnet in the second Availability Zone
    Type: String
    Default: 10.192.21.0/24

  PrivateSubnet3CIDR:
    Description: Please enter the IP range (CIDR notation) for the private subnet in the second Availability Zone
    Type: String
    Default: 10.192.22.0/24

  DBClass:
    Description: Database instance class
    Type: String
    Default: db.m6g.xlarge
    AllowedValues:
      - db.m5.xlarge
      - db.m6g.xlarge
      - db.r5.xlarge
      - db.r6g.xlarge
      - db.t3.xalrge    
    ConstraintDescription: must select a valid database instance type.

  DBUser:
    Description: The CVAT database admin account username
    Default: postgres
    Type: String
    MinLength: '1'
    MaxLength: '16'
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    ConstraintDescription: must begin with a letter and contain only alphanumeric characters.
  DBPassword:
    Description: The CVAT database admin account password
    Default: cvat123456
    Type: String
    MinLength: '8'
    MaxLength: '41'
    AllowedPattern: '[a-zA-Z0-9]*'
    ConstraintDescription: must contain only alphanumeric characters.
  MultiAZDatabase:
    Default: 'false'
    Description: Create a Multi-AZ MySQL Amazon RDS database instance
    Type: String
    AllowedValues:
      - 'true'
      - 'false'
    ConstraintDescription: must be either true or false.

  DBAllocatedStorage:
    Default: '50'
    Description: The size of the database (Gb)
    Type: Number
    MinValue: '5'
    MaxValue: '1024'
    ConstraintDescription: must be between 5 and 1024Gb.
  CVATUser:
    Description: The CVAT admin account username
    Default: admin
    Type: String
    MinLength: '1'
    MaxLength: '16'
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    ConstraintDescription: must begin with a letter and contain only alphanumeric characters.
  CVATPassword:
    Description: The CVAT admin account password
    Default: cvat123456
    Type: String
    MinLength: '8'
    MaxLength: '41'
    AllowedPattern: '[a-zA-Z0-9]*'
    ConstraintDescription: must contain only alphanumeric characters.

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName} VPC

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Ref PublicSubnet1CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName} Public Subnet (AZ1)

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs  '' ]
      CidrBlock: !Ref PublicSubnet2CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName} Public Subnet (AZ2)

  PublicSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 2, !GetAZs  '' ]
      CidrBlock: !Ref PublicSubnet3CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName} Public Subnet (AZ3)

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs  '' ]
      CidrBlock: !Ref PrivateSubnet1CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName} Private Subnet (AZ1)

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs  '' ]
      CidrBlock: !Ref PrivateSubnet2CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName} Private Subnet (AZ2)
  
  PrivateSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 2, !GetAZs  '' ]
      CidrBlock: !Ref PrivateSubnet3CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName} Private Subnet (AZ3)

  NatGateway1EIP:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName} NGW(AZ1)

  NatGateway2EIP:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName} NGW(AZ2)

  NatGateway3EIP:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName} NGW(AZ3)

  NatGateway1:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGateway1EIP.AllocationId
      SubnetId: !Ref PublicSubnet1

  NatGateway2:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGateway2EIP.AllocationId
      SubnetId: !Ref PublicSubnet2

  NatGateway3:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGateway3EIP.AllocationId
      SubnetId: !Ref PublicSubnet3

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName} Public Routes

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2

  PublicSubnet3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet3


  PrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName} Private Routes (AZ1)

  DefaultPrivateRoute1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway1

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      SubnetId: !Ref PrivateSubnet1

  PrivateRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName} Private Routes (AZ2)

  DefaultPrivateRoute2:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway2

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      SubnetId: !Ref PrivateSubnet2

  PrivateRouteTable3:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName} Private Routes (AZ3)

  DefaultPrivateRoute3:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable3
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway3

  PrivateSubnet3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable3
      SubnetId: !Ref PrivateSubnet3

  ALBServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: "CVAT ALB SG"
      GroupDescription: "Security group for CVAT ALB"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: '0.0.0.0/0'
        - IpProtocol: tcp
          FromPort: '443'
          ToPort: '443'
          CidrIp: '0.0.0.0/0'
      VpcId: !Ref VPC

  AppServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: "CVAT Server SG"
      GroupDescription: "Security group for CVAT Server"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '8080'
          ToPort: '8080'
          SourceSecurityGroupId: !Ref ALBServerSecurityGroup
      VpcId: !Ref VPC

  UIServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: "CVAT UI SG"
      GroupDescription: "Security group for CVAT UI"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          SourceSecurityGroupId: !Ref ALBServerSecurityGroup
      VpcId: !Ref VPC

  ServerlessSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: "CVAT Serverless SG"
      GroupDescription: "Security group for CVAT Serverless"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '8070'
          ToPort: '8070'
          SourceSecurityGroupId: !Ref AppServerSecurityGroup
      VpcId: !Ref VPC

  SagemakerEndpointSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: "CVAT SageMaker Endpoint SG"
      GroupDescription: "Security group for SageMaker Endpoint"
      VpcId: !Ref VPC

  EfsSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: "CVAT EFS SG"
      GroupDescription: "EFS Security Group"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '2049'
          ToPort: '2049'
          SourceSecurityGroupId: !Ref AppServerSecurityGroup
      VpcId: !Ref VPC

  ElasticacheSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: "CVAT Redis SG"
      GroupDescription: "Elasticache Security Group"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '6379'
          ToPort: '6379'
          SourceSecurityGroupId: !Ref AppServerSecurityGroup
      VpcId: !Ref VPC

  DBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: "CVAT Postgresql DB SG"
      GroupDescription: "CVAT Postgresql DB SG"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '5432'
          ToPort: '5432'
          SourceSecurityGroupId: !Ref AppServerSecurityGroup
      VpcId: !Ref VPC

  ElasticacheSubnetGroup:
    Type: AWS::ElastiCache::SubnetGroup
    Properties:
      CacheSubnetGroupName: !Sub ${AWS::StackName}-CacheSubnetGroup
      Description: "Redis Cache Subnet Group"
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
        - !Ref PrivateSubnet3

  ElasticacheCluster:
    Type: AWS::ElastiCache::CacheCluster
    Properties:
      Engine: redis
      CacheNodeType: cache.r5.large
      NumCacheNodes: '1'
      CacheSubnetGroupName: !Ref ElasticacheSubnetGroup
      VpcSecurityGroupIds:
        - !Ref ElasticacheSecurityGroup

  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties: 
      DBSubnetGroupName: !Sub ${AWS::StackName}-DBSubnetGroup
      DBSubnetGroupDescription: "CVAT Postgresql DB Subnet Group"
      SubnetIds: 
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
        - !Ref PrivateSubnet3


  DBInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      DBName: cvat
      Engine: postgres
      MultiAZ: !Ref MultiAZDatabase
      MasterUsername: !Ref DBUser
      MasterUserPassword: !Ref DBPassword
      DBInstanceClass: !Ref DBClass
      AllocatedStorage: !Ref DBAllocatedStorage
      EngineVersion: '12.7'
      DBSubnetGroupName: !Ref DBSubnetGroup
      DBInstanceIdentifier: cvat-db
      VPCSecurityGroups:
        - !Ref DBSecurityGroup

  EcsTaskRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: CVATEcsTaskRole
      ManagedPolicyArns: 
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      Policies:
        - PolicyName: SageMakerEnpointInvoke
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Sid: SageMakerEnpointInvokeSid
                Effect: Allow
                Action: "sagemaker:InvokeEndpoint"
                Resource: "*"
      AssumeRolePolicyDocument:
        Version: '2008-10-17'
        Statement:
        - Sid: ''
          Effect: Allow
          Principal:
            Service: ecs-tasks.amazonaws.com
          Action: sts:AssumeRole

  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /ecs/cvat

  CVATEfs:
    Type: AWS::EFS::FileSystem
    Properties:
      FileSystemTags:
        - Key: Name
          Value: CVAT_EFS
      Encrypted: true

  EFSMountTarget1:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref CVATEfs
      SubnetId: !Ref PrivateSubnet1
      SecurityGroups:
      - !Ref EfsSecurityGroup

  EFSMountTarget2:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref CVATEfs
      SubnetId: !Ref PrivateSubnet2
      SecurityGroups:
      - !Ref EfsSecurityGroup

  EFSMountTarget3:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref CVATEfs
      SubnetId: !Ref PrivateSubnet3
      SecurityGroups:
      - !Ref EfsSecurityGroup

  DataAccessPoint:
    Type: 'AWS::EFS::AccessPoint'
    Properties:
      FileSystemId: !Ref CVATEfs
      PosixUser:
        Uid: "1000"
        Gid: "1000"
      RootDirectory:
        CreationInfo:
          OwnerGid: "1000"
          OwnerUid: "1000"
          Permissions: "0755"
        Path: "/data"

  ShareAccessPoint:
    Type: 'AWS::EFS::AccessPoint'
    Properties:
      FileSystemId: !Ref CVATEfs
      PosixUser:
        Uid: "1000"
        Gid: "1000"
      RootDirectory:
        CreationInfo:
          OwnerGid: "1000"
          OwnerUid: "1000"
          Permissions: "0755"
        Path: "/share"

  CmdTaskDefinition: 
    Type: AWS::ECS::TaskDefinition
    Properties:
      ExecutionRoleArn: !GetAtt EcsTaskRole.Arn
      ContainerDefinitions:
        - LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref LogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: ecs
          EntryPoint:
            - sh
            - "-c"
          PortMappings:
            - HostPort: 8080
              Protocol: tcp
              ContainerPort: 8080
          Command:
            - >
              /opt/venv/bin/python manage.py migrate &&
              /opt/venv/bin/python manage.py createsuperuser --no-input
          Environment:
            - Name: ADAPTIVE_AUTO_ANNOTATION
              Value: 'false'
            - Name: ALLOWED_HOSTS
              Value: "*"
            - Name: CVAT_POSTGRES_HOST
              Value: !GetAtt DBInstance.Endpoint.Address
            - Name: CVAT_POSTGRES_PASSWORD
              Value: !Ref DBPassword
            - Name: CVAT_POSTGRES_USER
              Value: !Ref DBUser
            - Name: CVAT_REDIS_HOST
              Value: !GetAtt ElasticacheCluster.RedisEndpoint.Address
            - Name: DJANGO_MODWSGI_EXTRA_ARGS
              Value: ''
            - Name: DJANGO_SUPERUSER_EMAIL
              Value: admin@example.com
            - Name: DJANGO_SUPERUSER_PASSWORD
              Value: !Ref CVATPassword
            - Name: DJANGO_SUPERUSER_USERNAME
              Value: !Ref CVATUser
          MountPoints:
            - ContainerPath: "/home/django/data"
              SourceVolume: cvat-data
            - ContainerPath: "/home/django/share"
              SourceVolume: cvat-share
          Image: '975230531453.dkr.ecr.ap-northeast-1.amazonaws.com/dockerhub/openvino/cvat_server'
          Name: cvat-server-container
      Memory: '2048'
      TaskRoleArn: !GetAtt EcsTaskRole.Arn
      Family: cvat-cmd-task
      RequiresCompatibilities:
        - FARGATE
      NetworkMode: awsvpc
      Cpu: '1024'
      Volumes:
        - EFSVolumeConfiguration:
            FilesystemId: !Ref CVATEfs
            AuthorizationConfig:
              AccessPointId: !Ref DataAccessPoint
            TransitEncryption: ENABLED
            RootDirectory: "/"
          Name: cvat-data
        - EFSVolumeConfiguration:
            FilesystemId: !Ref CVATEfs
            AuthorizationConfig:
              AccessPointId: !Ref ShareAccessPoint
            TransitEncryption: ENABLED
            RootDirectory: "/"
          Name: cvat-share

  ServerTaskDefinition: 
    Type: AWS::ECS::TaskDefinition
    Properties:
      ExecutionRoleArn: !GetAtt EcsTaskRole.Arn
      ContainerDefinitions:
        - LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref LogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: ecs
          PortMappings:
            - HostPort: 8080
              Protocol: tcp
              ContainerPort: 8080
          Environment:
            - Name: ADAPTIVE_AUTO_ANNOTATION
              Value: 'false'
            - Name: ALLOWED_HOSTS
              Value: "*"
            - Name: CVAT_POSTGRES_HOST
              Value: !GetAtt DBInstance.Endpoint.Address
            - Name: CVAT_POSTGRES_PASSWORD
              Value: !Ref DBPassword
            - Name: CVAT_POSTGRES_USER
              Value: !Ref DBUser
            - Name: CVAT_REDIS_HOST
              Value: !GetAtt ElasticacheCluster.RedisEndpoint.Address
            - Name: DJANGO_MODWSGI_EXTRA_ARGS
              Value: ''
            - Name: CVAT_NUCLIO_HOST
              Value: serverless.cvat.local
            - Name: CVAT_SERVERLESS
              Value: 1
          MountPoints:
            - ContainerPath: "/home/django/data"
              SourceVolume: cvat-data
            - ContainerPath: "/home/django/share"
              SourceVolume: cvat-share
          Image: '975230531453.dkr.ecr.ap-northeast-1.amazonaws.com/dockerhub/openvino/cvat_server'
          Name: cvat-server-container
      Memory: '4096'
      TaskRoleArn: !GetAtt EcsTaskRole.Arn
      Family: cvat-server-task
      RequiresCompatibilities:
        - FARGATE
      NetworkMode: awsvpc
      Cpu: '2048'
      Volumes:
        - EFSVolumeConfiguration:
            FilesystemId: !Ref CVATEfs
            AuthorizationConfig:
              AccessPointId: !Ref DataAccessPoint
            TransitEncryption: ENABLED
            RootDirectory: "/"
          Name: cvat-data
        - EFSVolumeConfiguration:
            FilesystemId: !Ref CVATEfs
            AuthorizationConfig:
              AccessPointId: !Ref ShareAccessPoint
            TransitEncryption: ENABLED
            RootDirectory: "/"
          Name: cvat-share

  UITaskDefinition: 
    Type: AWS::ECS::TaskDefinition
    Properties:
      ExecutionRoleArn: !GetAtt EcsTaskRole.Arn
      ContainerDefinitions:
        - LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref LogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: ecs
          PortMappings:
          - HostPort: 80
            Protocol: tcp
            ContainerPort: 80
          Image: '975230531453.dkr.ecr.ap-northeast-1.amazonaws.com/dockerhub/openvino/cvat_ui'
          Name: cvat-ui-container
      Memory: '512'
      TaskRoleArn: !GetAtt EcsTaskRole.Arn
      Family: cvat-ui-task
      RequiresCompatibilities:
      - FARGATE
      NetworkMode: awsvpc
      Cpu: '256'

  ServerlessTaskDefinition: 
    Type: AWS::ECS::TaskDefinition
    Properties:
      ExecutionRoleArn: !GetAtt EcsTaskRole.Arn
      ContainerDefinitions:
        - LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref LogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: ecs
          PortMappings:
          - HostPort: 8070
            Protocol: tcp
            ContainerPort: 8070
          Environment:
            - Name: SERVERLESS_SAGEMAKER_ENDPOINT
              Value: !GetAtt CvatSagemakerEndpoint.EndpointName
            - Name: ALLOWED_HOSTS
              Value: '*'
          Image: '975230531453.dkr.ecr.ap-northeast-1.amazonaws.com/dockerhub/openvino/cvat_serverless'
          Name: cvat-serverless-container
      Memory: '2048'
      TaskRoleArn: !GetAtt EcsTaskRole.Arn
      Family: cvat-serverless-task
      RequiresCompatibilities:
      - FARGATE
      NetworkMode: awsvpc
      Cpu: '1024'

  DatasetTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ExecutionRoleArn: !GetAtt EcsTaskRole.Arn
      ContainerDefinitions:
        - LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref LogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: ecs
          Command:
            - s3
            - --no-sign-request
            - cp
            - s3://cvat-aws/dataset/persons.jpg
            - /mnt/
          MountPoints:
            - ContainerPath: /mnt
              SourceVolume: cvat-share
          Image: amazon/aws-cli
          Essential: False
          Name: dataset-s3-container1
        - LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref LogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: ecs
          Command:
            - s3
            - --no-sign-request
            - cp
            - s3://cvat-aws/dataset/handball.tar.gz
            - /mnt/
          MountPoints:
            - ContainerPath: /mnt
              SourceVolume: cvat-share
          Image: amazon/aws-cli
          Essential: False
          Name: dataset-s3-container2
        - LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref LogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: ecs
          EntryPoint:
            - bash
            - "-c"
          Command: 
            - >
              tar --owner=1000 --group=1000 --numeric-owner -zxvf /mnt/handball.tar.gz -C /mnt/ &&
              rm /mnt/handball.tar.gz
          DependsOn:
            - Condition: SUCCESS
              ContainerName: dataset-s3-container1
            - Condition: SUCCESS
              ContainerName: dataset-s3-container2
          MountPoints:
            - ContainerPath: /mnt
              SourceVolume: cvat-share
          Image: ubuntu:20.04
          Name: dataset-tar-container
      Memory: '2048'
      TaskRoleArn: !GetAtt EcsTaskRole.Arn
      Family: dataset-cmd-task
      RequiresCompatibilities:
        - FARGATE
      NetworkMode: awsvpc
      Cpu: '1024'
      Volumes:
        - EFSVolumeConfiguration:
            FilesystemId: !Ref CVATEfs
            AuthorizationConfig:
              AccessPointId: !Ref ShareAccessPoint
            TransitEncryption: ENABLED
            RootDirectory: "/"
          Name: cvat-share

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: '*'
              - Effect: Allow
                Action:
                  - ecs:RunTask
                  - iam:PassRole
                Resource: '*'

  RunCmdFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          import boto3
          import urllib3
          import json
          SUCCESS = "SUCCESS"
          FAILED = "FAILED"
          http = urllib3.PoolManager()
          def lambda_handler(event, context):
              print(event)
              if (event['RequestType'] == 'Create'):
                  try:
                      client = boto3.client('ecs')
                      print("Running task.")
                      response = client.run_task(
                          cluster=event['ResourceProperties']['Cluster'], 
                          launchType='FARGATE',
                          taskDefinition=event['ResourceProperties']['TaskDefinition'],  # <-- notice no revision number
                          count=1,
                          platformVersion='LATEST',
                          networkConfiguration={
                              'awsvpcConfiguration': {
                                  'subnets': event['ResourceProperties']['Subnets'],
                              'securityGroups': [event['ResourceProperties']['securityGroups']],
                              'assignPublicIp': 'DISABLED'
                              }
                          })
                      print("Finished invoking task.")
                  except Exception as e:
                      send(event, context, FAILED, {'exception': str(e)})
              send(event, context, SUCCESS, dict())


          def send(event, context, responseStatus, responseData, physicalResourceId=None, noEcho=False, reason=None):
              responseUrl = event['ResponseURL']

              print(responseUrl)

              responseBody = {
                  'Status' : responseStatus,
                  'Reason' : reason or "See the details in CloudWatch Log Stream: {}".format(context.log_stream_name),
                  'PhysicalResourceId' : physicalResourceId or context.log_stream_name,
                  'StackId' : event['StackId'],
                  'RequestId' : event['RequestId'],
                  'LogicalResourceId' : event['LogicalResourceId'],
                  'NoEcho' : noEcho,
                  'Data' : responseData
              }

              json_responseBody = json.dumps(responseBody)

              print("Response body:")
              print(json_responseBody)

              headers = {
                  'content-type' : '',
                  'content-length' : str(len(json_responseBody))
              }

              try:
                  response = http.request('PUT', responseUrl, headers=headers, body=json_responseBody)
                  print("Status code:", response.status)


              except Exception as e:
                  print("send failed executing:", e)

      Handler: index.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: python3.6
      Timeout: '300'

  CvatCmdCustom:
    Type: Custom::CvatCmd
    DependsOn: CmdTaskDefinition
    Properties:
      ServiceToken: !GetAtt RunCmdFunction.Arn
      Region: !Ref AWS::Region
      Cluster: !Ref ECSCluster
      TaskDefinition: cvat-cmd-task
      Subnets:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
        - !Ref PrivateSubnet3
      securityGroups: !Ref AppServerSecurityGroup

  DatasetCmdCustom:
    Type: Custom::DatasetCmd
    DependsOn: DatasetTaskDefinition
    Properties:
      ServiceToken: !GetAtt RunCmdFunction.Arn
      Region: !Ref AWS::Region
      Cluster: !Ref ECSCluster
      TaskDefinition: dataset-cmd-task
      Subnets:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
        - !Ref PrivateSubnet3
      securityGroups: !Ref AppServerSecurityGroup


  CvatApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: cvat-alb
      Scheme: internet-facing
      SecurityGroups:
        - !Ref ALBServerSecurityGroup
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
        - !Ref PublicSubnet3
      Type: application

  CvatUITargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: cvat-ui-target
      Protocol: HTTP
      TargetType: ip
      VpcId: !Ref VPC
      Port: 80
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: 60

  CvatServerTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: cvat-server-target
      Protocol: HTTP
      Matcher:
        HttpCode: "300-399"
      HealthCheckPath: "/api/swagger"
      TargetType: ip
      VpcId: !Ref VPC
      Port: 80
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: 60


  CvatLoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref CvatApplicationLoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref CvatUITargetGroup

  CvatServerListenerRule1:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Priority: 100
      ListenerArn: !Ref CvatLoadBalancerListener
      Actions:
        - Type: forward
          TargetGroupArn: !Ref CvatServerTargetGroup
      Conditions:
        - Field: path-pattern
          Values:
            - "/api/*"
            - "/git/*"
            - "/opencv/*"
            - "/analytics/*"
            - "/static/*"

  CvatServerListenerRule2:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Priority: 200
      ListenerArn: !Ref CvatLoadBalancerListener
      Actions:
        - Type: forward
          TargetGroupArn: !Ref CvatServerTargetGroup
      Conditions:
        - Field: path-pattern
          Values:
            - "/admin*"
            - "/documentation/*"
            - "/django-rq*"

  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: CvatFargateCluster
      CapacityProviders:
        - FARGATE
        - FARGATE_SPOT
      DefaultCapacityProviderStrategy:
        - CapacityProvider: FARGATE
          Weight: 1
        - CapacityProvider: FARGATE_SPOT
          Weight: 1

  ServerECSService:
    Type: AWS::ECS::Service
    DependsOn: 
      - CvatLoadBalancerListener
      - CvatCmdCustom
    Properties:
      ServiceName: cvat-server-service
      HealthCheckGracePeriodSeconds: 300
      LaunchType: FARGATE
      LoadBalancers:
        - ContainerName: cvat-server-container
          ContainerPort: 8080
          TargetGroupArn: !Ref CvatServerTargetGroup
      Cluster: !Ref ECSCluster
      DesiredCount: 2
      TaskDefinition: !Ref ServerTaskDefinition
      NetworkConfiguration:
        AwsvpcConfiguration:
          SecurityGroups:
            - !Ref AppServerSecurityGroup
          Subnets:
            - !Ref PrivateSubnet1
            - !Ref PrivateSubnet2
            - !Ref PrivateSubnet3

  UIECSService:
    Type: AWS::ECS::Service
    DependsOn: CvatLoadBalancerListener
    Properties:
      ServiceName: cvat-ui-service
      LaunchType: FARGATE
      LoadBalancers:
        - ContainerName: cvat-ui-container
          ContainerPort: 80
          TargetGroupArn: !Ref CvatUITargetGroup
      Cluster: !Ref ECSCluster
      DesiredCount: 2
      TaskDefinition: !Ref UITaskDefinition
      NetworkConfiguration:
        AwsvpcConfiguration:
          SecurityGroups:
            - !Ref UIServerSecurityGroup
          Subnets:
            - !Ref PrivateSubnet1
            - !Ref PrivateSubnet2
            - !Ref PrivateSubnet3

  ServerlessECSService:
    Type: AWS::ECS::Service
    Properties:
      ServiceName: cvat-serverless-service
      LaunchType: FARGATE
      Cluster: !Ref ECSCluster
      DesiredCount: 2
      TaskDefinition: !Ref ServerlessTaskDefinition
      ServiceRegistries:
        - RegistryArn: !GetAtt CavtServerlessServiceDiscoveryEntry.Arn
      NetworkConfiguration:
        AwsvpcConfiguration:
          SecurityGroups:
            - !Ref ServerlessSecurityGroup
          Subnets:
            - !Ref PrivateSubnet1
            - !Ref PrivateSubnet2
            - !Ref PrivateSubnet3

  CvatCloudmapServiceDiscovery:
    Type: AWS::ServiceDiscovery::PrivateDnsNamespace
    Properties:
      Name: cvat.local
      Description: CVAT Service Discovery
      Vpc: !Ref VPC

  CavtServerlessServiceDiscoveryEntry:
        Type: AWS::ServiceDiscovery::Service
        Properties:
            Name: serverless
            DnsConfig:
                DnsRecords: 
                    - Type: A
                      TTL: "10"
                NamespaceId: !Ref CvatCloudmapServiceDiscovery
            HealthCheckCustomConfig:
                FailureThreshold: '1'

  CvatSagemakerRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: CvatSagemakerExecRole
      ManagedPolicyArns: 
        - arn:aws:iam::aws:policy/AmazonSageMakerFullAccess
      AssumeRolePolicyDocument:
        Version: '2008-10-17'
        Statement:
        - Sid: ''
          Effect: Allow
          Principal:
            Service: sagemaker.amazonaws.com
          Action: sts:AssumeRole

  CvatSagemakerModel:
    Type: AWS::SageMaker::Model
    Properties:
      ModelName: cvat-ai-inference-models
      InferenceExecutionConfig:
        Mode: Direct
      ExecutionRoleArn: !GetAtt CvatSagemakerRole.Arn
      VpcConfig:
        Subnets:
          - !Ref PrivateSubnet1
          - !Ref PrivateSubnet2
          - !Ref PrivateSubnet3
        SecurityGroupIds:
          - !Ref SagemakerEndpointSecurityGroup
      Containers:
        - ContainerHostname: pthIogContainer
          Image: 975230531453.dkr.ecr.ap-northeast-1.amazonaws.com/sagemaker/pytorch:0.4-cpu-py3-opencv
          ModelDataUrl: s3://cvat-aws/pth-inside-outside-guidance/model.tar.gz
          Environment:
            SAGEMAKER_CONTAINER_LOG_LEVEL: '20'
            SAGEMAKER_PROGRAM: inference.py
            SAGEMAKER_REGION: !Ref AWS::Region
            SAGEMAKER_SUBMIT_DIRECTORY: s3://cvat-aws/pth-inside-outside-guidance/sourcedir.tar.gz
        - ContainerHostname: pthFastrcnnContainer
          Image: 975230531453.dkr.ecr.ap-northeast-1.amazonaws.com/sagemaker/torchserve:v1
          ModelDataUrl: s3://cvat-aws/pth-fastrcnn/fastrcnn.tar.gz
        - ContainerHostname: tfFastrcnnContainer
          Image: 763104351884.dkr.ecr.ap-northeast-1.amazonaws.com/tensorflow-inference:2.4.1-cpu
          ModelDataUrl: s3://cvat-aws/tf-faster-rcnn-inception-v2/faster_rcnn_inception_v2_coco.tar.gz
        - ContainerHostname: pthSimmaskContainer
          Image: 975230531453.dkr.ecr.ap-northeast-1.amazonaws.com/sagemaker/pytorch:0.4.1-cpu-py3-siammask
          ModelDataUrl: s3://cvat-aws/pth-foolwood-siammask/model.tar.gz
          Environment:
            SAGEMAKER_CONTAINER_LOG_LEVEL: '20'
            SAGEMAKER_PROGRAM: inference.py
            SAGEMAKER_REGION: !Ref AWS::Region
            SAGEMAKER_SUBMIT_DIRECTORY: s3://cvat-aws/pth-foolwood-siammask/sourcedir.tar.gz
        - ContainerHostname: openvinoIdentificationContainer
          Image: 975230531453.dkr.ecr.ap-northeast-1.amazonaws.com/sagemaker/openvino:model_server_2021.3
          ModelDataUrl: s3://cvat-aws/openvinio-person-reidentification-retail/person-reidentification-retail.tar.gz

  CvatSagemakerEndpointConfig:
    Type: AWS::SageMaker::EndpointConfig
    Properties:
      EndpointConfigName: cvat-ai-inference-endpoint-config
      ProductionVariants:
        - VariantName: v1
          ModelName: !GetAtt CvatSagemakerModel.ModelName
          InitialInstanceCount: 1
          InstanceType: ml.c5d.xlarge
          InitialVariantWeight: 1.0

  CvatSagemakerEndpoint:
    Type: AWS::SageMaker::Endpoint
    Properties:
      EndpointName: cvat-ai-inference-endpoint
      EndpointConfigName: !GetAtt CvatSagemakerEndpointConfig.EndpointConfigName

Outputs:
  VPC:
    Description: A reference to the created VPC
    Value: !Ref VPC

  RDS:
    Description: A reference to the created RDS
    Value: !Ref DBInstance

  Redis:
    Description: A reference to the created Redis
    Value: !Ref ElasticacheCluster

  EFS:
    Description: A reference to the created EFS
    Value: !Ref CVATEfs

  URL:
    Description: A reference to the created CVAS URL
    Value: !Join
          - ''
          - - 'http://'
            - !GetAtt CvatApplicationLoadBalancer.DNSName